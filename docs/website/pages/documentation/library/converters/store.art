name: "store"
type: :function
description: "create or load a persistent store on disk"
module: "Converters"
line: 1272
source: "https://github.com/arturo-lang/arturo/blob/v0.9.83/src/library/Converters.nim#L1272"
returns: [
                :range
        ]
examples: [
                {
                        ; create a new store with the name `mystore`
                        ; it will be automatically live-stored in a file in the same folder
                        ; using the native Arturo format
                        data: store "mystore"
                        
                        ; store some data
                        data\name: "John"
                        data\surname: "Doe"
                        data\age: 36
                        
                        ; and let's retrieve our data
                        data
                        ; => [name:"John" surname:"Doe" age:36]
                }
                 {
                        ; create a new "global" configuration store
                        ; that will be saved automatically in ~/.arturo/stores
                        globalStore: store.global "configuration"
                        
                        ; we are now ready to add or retrieve some persistent data!
                }
                 {
                        ; create a new JSON store with the name `mystore`
                        ; it will be automatically live-stored in a file in the same folder
                        ; with the name `mystore.json`
                        data: store.json "mystore"
                        
                        ; store some data
                        da\people: []
                        
                        ; data can be as complicated as in any normal dictionary
                        da\people: da\people ++ #[name: "John" surname: "Doe"]
                        
                        ; check some specific store value
                        da\people\0\name
                        ; => "John"
                }
                 {
                        ; create a new deferred store with the name `mystore`
                        ; it will be automatically saved in a file in the same folder
                        ; using the native Arturo format
                        defStore: store.deferred "mystore"
                        
                        ; let's save some data
                        defStore\name: "John"
                        defStore\surname: "Doe"
                        
                        ; and print it
                        print defStore
                        ; [name:John surname:Doe]
                        
                        ; in this case, all data is available at any given moment
                        ; but will not be saved to disk for each and every operation;
                        ; instead, it will be saved in its totality just before
                        ; the program terminates!
                }
        ]
attributes: #[
        deferred: #[
                types: [
                                :logical
                        ]
                description: "save to disk only on program termination"
                ]
        global: #[
                types: [
                                :logical
                        ]
                description: "save as global store"
                ]
        native: #[
                types: [
                                :logical
                        ]
                description: "force native/Arturo format"
                ]
        json: #[
                types: [
                                :logical
                        ]
                description: "force Json format"
                ]
        db: #[
                types: [
                                :logical
                        ]
                description: "force database/SQlite format"
                ]
        ]
arguments: #[
        path: [
                        :string
                         :literal
                ]
        ]
related: [
                "Converters/to"
                 "Converters/with"
                 "Converters/dictionary"
                 "Converters/function"
        ]